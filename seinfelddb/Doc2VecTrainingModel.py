# -*- coding: utf-8 -*-
"""
Created on Mon Jun 25 09:07:42 2018

@author: ANANYA_SRINIVASAN
"""

#Training 2.0
#Improvements: Realized I would need document tags in order to retrieve the corresponding documents from the corpus
#For efficiency, I used a csv corpus from Kaggle instead to save migration time from corpus to DB
#Also need a database that can be compatible with the Angular frontend and Flask framework so data can be retrieved with ease
#References for Doc2Vec Training: https://medium.com/@mishra.thedeepak/doc2vec-in-a-simple-way-fa80bfe81104
#                                 https://github.com/RaRe-Technologies/gensim/blob/develop/docs/notebooks/doc2vec-lee.ipynb
#                                 https://github.com/ngaude/kaggle/blob/master/cdiscount/doc2vec.py

import gensim
#import csv
#import numpy as np
import pandas as pd

#get list of document titles
#For reference: The corpus has 499 docs
doc_id = pd.read_csv("test.csv", sep=',', usecols=['File'], squeeze=True)
docs = pd.read_csv("test.csv", sep=',', usecols=['Data'], squeeze=True)

#Test: printing out document in comparison to the document generated by the inference test
#print(docs[198])

#Test print to ensure entire document content is captured
#print(docs[22])

#tag the documents in training set
tag_docs = [gensim.models.doc2vec.TaggedDocument(t.split(),[i,]) for i,t in enumerate(docs)]

#Test print to see if the docuements have tags
#print(tag_docs[:10])

#generate Doc2Vec model
model = gensim.models.Doc2Vec(size=300, min_count=0, alpha=0.025, min_alpha=0.025)
model.build_vocab(tag_docs) #build a dictionary of all unique words
model.save('doc2vec.model') #save model

#loading model
d2v_model = gensim.models.doc2vec.Doc2Vec.load('doc2vec.model')
#print(d2v_model.docvecs[1])

#inference test: get the most 'similar' docuements and least similar based on a query
inferred_vector=d2v_model.infer_vector(['good'])
sims=d2v_model.docvecs.most_similar([inferred_vector],topn=len(d2v_model.docvecs))

for label, index in [('MOST', 0), ('SECONDBEST', 1), ('THIRD', 2), ('MEDIAN', len(sims)//2), ('LEAST', len(sims) - 1)]:
   print(u'%s %s: «%s»\n' % (label, sims[index], ' '.join(tag_docs[sims[index][0]].words)))